#SingleInstance Force

#include ..\include\lua.ahk2

#include ..\lib\
#include io.ahk2
#include misc.ahk2

global TEST_PATH := A_ScriptDir . "\scripts"

main(args)
{
	; Initialize lua
	L := luaL_newstate()

	; Open the libraries for what we're about to do.
	luaL_openlibs(L)

	; Ask for user input.
	printf("This is a test to see if we can create a simple 1-D table in Lua from AHK.\n")

	; Overwrite the print function as Lua prints (supposedly) to something else.
	setPrint(L, lua_print)

	tab := luaTable(L, 0, 3)
		.add("name",    "str",  A_ScriptName)
		.add("version", "str",  A_AhkVersion)
		.add("test",    "func", lua_test)
		.finish("globs")

	luaL_dofile(L, TEST_PATH . "\test03.lua")
	return 0
}

setPrint(L, fn)
{
	; Lua functions only push 1 parameter so setting the parameter count to 1 is only necessary.
	lua_pushcclosure(L, CallbackCreate(fn,, 1), 0)

	; Set the new value from the top of the stack as the "print" function.
	lua_setglobal(L, "print")
}

lua_test(L)
{
	msg := lua_tolstring(L, 1, 0)
	printf("TEST: " . msg . "`n")
}

lua_print(L)
{
	msg := lua_tolstring(L, 1, 0)
	printf(msg)
}

/*
luaTable(L, var, args*)
{
	lua_createtable(L, 0, args.length // 2)

	loop args.length // 2
	{
		key := args[A_Index * 2 - 1]
		value := args[A_Index]

		lua_pushstring(L, key)

		switch (Type(value))
		{
			case "String":
			{
				if (value == null)
				{
					lua_pushnil(L)
				}
				else
				{
					lua_pushstring(L, value)
				}
			}
			case "Integer":  lua_pushinteger(L, value)
			case "Func":
			{
				lua_pushcclosure(L, CallbackCreate(value,, 1), 0)
			}
		}

		lua_settable(L, -3)
	}

	lua_setglobal(L, var)
	return
}
*/

class LuaTable
{
	__new(L, narr, nrec)
	{
		this.L := L
		lua_createtable(this.L, narr, nrec)
	}

	add(key, form, value := unset)
	{
		lua_pushstring(this.L, key)

		switch (form)
		{
			case "str":
			{
				if (!IsSet(value))
				{
					throw Error("Value was not set", -1)
				}
				lua_pushstring(this.L, String(value))
			}
			case "int":
			{
				if (!IsSet(value))
				{
					throw Error("Value was not set", -1)
				}
				lua_pushinteger(this.L, Integer(value))
			}
			case "null", "nil":
			{
				lua_pushnil(this.L)
			}
			case "func", "fn":
			{
				if (!IsSet(value))
				{
					throw Error("Value was not set", -1)
				}
				lua_pushcclosure(this.L, CallbackCreate(value,, 1), 0)
			}
			default:
			{
				throw Error("Unknown value type", -1, String(form))
			}
		}

		lua_settable(this.L, -3)
		return this
	}

	finish(table_name)
	{
		lua_setglobal(this.L, table_name)
	}
}

if (A_LineFile == A_ScriptFullPath)
{
	ExitApp(main(A_Args) || 0)
}
