/*
  title:     Lua2Ahk
  version:   0.1.0
  copyright: GNU GENERAL PUBLIC LICENSE
  binaries:
	- ../assets/lua54.dll
  ahk:
    version: 2.0.2
	bit:     64
*/

#Requires AutoHotkey v2.0.2

#DllLoad ..\assets\lua54.dll

#include ..\lib\easystruct.ahk2

; Modify this in your main program, not here.
global __luadll                 := "..\assets\lua54.dll"

global LUA_VERSION_MAJOR        := "5"
global LUA_VERSION_MINOR        := "4"
global LUA_VERSION_RELEASE      := "4"
global LUA_VERSION_NUM          := 504
global LUA_VERSION_RELEASE_NUM  := LUA_VERSION_NUM * 100 + 4
global LUA_VERSION              := "Lua " . LUA_VERSION_MAJOR . "." . LUA_VERSION_MINOR
global LUA_RELEASE              := LUA_VERSION . "." . LUA_VERSION_RELEASE
global LUA_COPYRIGHT            := LUA_RELEASE . "  Copyright (C) 1994-2022 Lua.org, PUC-Rio"
global LUA_AUTHORS              := "R. Ierusalimschy, L. H. de Figueiredo, W. Celes"
global LUA_SIGNATURE            := "Lua"
global LUA_MULTRET              := -1
global LUA_OK                   := 0
global LUA_YIELD                := 1
global LUA_ERRRUN               := 2
global LUA_ERRSYNTAX            := 3
global LUA_ERRMEM               := 4
global LUA_ERRERR               := 5

global LUA_REGISTRYINDEX        := -10000
global LUA_ENVIRONINDEX         := -10001
global LUA_GLOBALSINDEX         := -10002

luaL_newstate()
{
	return DllCall(__luadll . "\luaL_newstate", "ptr")
}

luaL_openlibs(L)
{
	DllCall(__luadll . "\luaL_openlibs", "ptr", L)
}

lua_setglobal(L, name)
{
	DllCall(__luadll . "\lua_setglobal", "ptr", L, "astr", name)
}

lua_pushcclosure(L, f, n)
{
	DllCall(__luadll . "\lua_pushcclosure", "ptr", L, "ptr", f, "int", Integer(n))
}

lua_pushstring(L, s)
{
	DllCall(__luadll . "\lua_pushstring", "ptr", L, "astr", String(s))
	return s
}

lua_pushliteral(L, s)
{
	DllCall(__luadll . "\lua_pushliteral", "ptr", L, "astr", String(s))
}

lua_pushinteger(L, n)
{
	DllCall(__luadll . "\lua_pushinteger", "ptr", L, "int", Integer(n))
}

lua_pushnil(L)
{
	DllCall(__luadll . "\lua_pushnil", "ptr", L)
}

lua_tolstring(L, index, len)
{
	result := DllCall(__luadll . "\lua_tolstring", "ptr", L, "int", Integer(index), "int*", Integer(len))
	return StrGet(result, "UTF-8")
}

lua_tointeger(L, index)
{
	return DllCall(__luadll . "\lua_tointeger", "ptr", L, "int", Integer(index))
}

luaL_loadfilex(L, filename, mode)
{
	if (!FileExist(filename))
	{
		throw Error("File does not exist or is mispelled", -1, filename)
	}

	result := DllCall(__luadll . "\luaL_loadfilex", "ptr", L, "astr", String(filename),
		mode == null ? "int" : "str", mode == null ? 0 : String(mode))

	if (result != LUA_OK)
	{
		throw Error(lua_tolstring(L, -1, 0))
	}

	return result
}

lua_pcallk(L, nargs, nresults, msgh, ctx, k)
{
	result := DllCall(__luadll . "\lua_pcallk",
		"ptr", L,
		"int", Integer(nargs),
		"int", Integer(nresults),
		"int", Integer(msgh),
		"int", ctx,
		k == null ? "int" : "ptr", k || 0
	)

	if (result != LUA_OK)
	{
		throw Error(lua_tolstring(L, -1, 0))
	}

	return result
}

lua_createtable(L, narr, nrec)
{
	DllCall(__luadll . "\lua_createtable", "ptr", L, "int", Integer(narr), "int", Integer(nrec))
}

lua_settable(L, index)
{
	DllCall(__luadll . "\lua_settable", "ptr", L, "int", Integer(index))
}

lua_setfield(L, index, k)
{
	DllCall(__luadll . "\lua_setfield", "ptr", L, "int", Integer(index), "astr", String(k))
}

lua_rawset(L, index)
{
	DllCall(__luadll . "\lua_rawset", "ptr", L, "int", Integer(index))
}

luaL_dofile(L, filename)
{
	try
	{
		loadfilex_result := luaL_loadfilex(L, filename, null)
	}
	; Pass errors up the call tree.
	catch Any as err
	{
		throw Error(err.message, -1, err.extra || null)
	}

	try
	{
		pcall_result := lua_pcallk(L, 0, LUA_MULTRET, 0, 0, null)
	}
	; Pass errors up the call tree.
	catch Any as err
	{
		throw Error(err.message, -1, err.extra || null)
	}

	return loadfilex_result + pcall_result
}
